import React, { useEffect, useState } from 'react'
import './BuyCoins.css'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../store/auth'
import { toast } from 'react-toastify'

export default function BuyCoins() {
    const navigate = useNavigate()
    const {BACKEND_HOSTING_URL, authorizationToken, user} = useAuth()
    const [coins_arr, setCoins_arr] = useState([])
    
    const getAllCoinsPlans = async () => {
        try {
            const response = await fetch(`${BACKEND_HOSTING_URL}/api/coins/get_all_coins_plans`, {
                method: 'GET',
                headers: {
                    Authorization: authorizationToken
                },
            })

            if(response.ok){
                setCoins_arr(await response.json())
            }
        } catch (error) {
            console.log(error)
        }
    }

    useEffect(() => {
        getAllCoinsPlans()
    }, [])

    const handleBuyCoin = async (coin_details) => {
        // console.log(coin_details);
        const orderUrl = `${BACKEND_HOSTING_URL}/api/payments/create_order`;
        const data = await fetch(orderUrl, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
                Authorization: authorizationToken
            },
            body: JSON.stringify({
                price: coin_details.price,
                email: user.email
            })
        })
        

        try{
            const options = {
                key: "rzp_test_pXHbFRxt8rR1Ig", // Replace with your Razorpay Key ID
                amount: data.amount,
                currency: data.currency,
                name: "Automatic Exam Bot",
                description: "Test Transaction",
                order_id: data.id, // This is the order_id generated by Razorpay
                handler: async function (response) {
                    try {
                        
                        const verifyUrl = `${BACKEND_HOSTING_URL}/api/payments/verify_payment`;
                        const verifyResponse = await fetch(verifyUrl, {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json",
                                Authorization: authorizationToken
                            },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                            })
                        });
    
                        // verifyResponse.data.status === 'Payment verified successfully'
                        if (true) {
                            toast.success("payment Successfully!!")

                            const res = await fetch(`${BACKEND_HOSTING_URL}/api/coins/get_coins`, {
                                method: 'POST',
                                headers: {
                                    "Content-Type": "application/json",
                                    Authorization: authorizationToken
                                },
                                body: JSON.stringify({
                                    email: user.email,
                                    coins: coin_details.coin
                                })
                            })

                            const res_data = res.json()

                            if(res.ok){
                                toast.success("Coins added successfully")
                                navigate('/pricing');
                            }else{
                                Object.values(res_data).map((err) => {
                                    return toast.error(err)
                                  })
                            }
                        } else {
                            toast.error("Payment verification failed");
                        }
                    } catch (error) {
                        toast.error("Error in payment verification");
                    }
                },
                prefill: {
                    name: user.username,
                    email: user.email,
                    contact: user.phone,
                },
                theme: {
                    color: "#3399cc",
                },
            };
    
            const rzp1 = new window.Razorpay(options);
            rzp1.open();
        }catch(error){
            console.log(error);
            
        }
    };

  return (
    <>
        <div className="outer_buycoin">
            <div className="coin_inner coin_conatiner">
                {
                    coins_arr.map((val, index) => {
                        return (
                            <div className="pricing_card" key={index}>
                                <div className='price_details'>
                                    <div className="img_box">
                                        <img src="../coins.png" alt="coins" />
                                    </div>
                                    <div className="total_coin">
                                        <h3>{val.coin} ðŸª™</h3>
                                    </div>
                                    <div className="price_exp">
                                        <p>price: &#x20B9;{val.price}</p>
                                        <p>expires-in: {val.expire}</p>
                                    </div>
                                    <div className="decp">
                                        <p>{val.description}</p>
                                    </div>
                                </div>
                                <div className='buy_coin'>
                                    {/* <button>Buy Coin</button> */}
                                    <button onClick={() => handleBuyCoin(val)}>&#x20B9; {val.price}</button>
                                </div>
                            </div>
                        )
                    })
                }
            </div>
        </div>
    </>
  )
}